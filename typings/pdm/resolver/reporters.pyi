"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING
from resolvelib import BaseReporter
from pdm import termui
from resolvelib.resolvers import Criterion, RequirementInformation, State
from pdm.models.candidates import Candidate
from pdm.models.requirements import Requirement

if TYPE_CHECKING:
    ...
logger = ...
def log_title(title: str) -> None:
    ...

class SpinnerReporter(BaseReporter):
    def __init__(self, spinner: termui.Spinner, requirements: list[Requirement]) -> None:
        ...

    def starting_round(self, index: int) -> None:
        ...

    def starting(self) -> None:
        """Called before the resolution actually starts."""
        ...

    def ending_round(self, index: int, state: State) -> None:
        """Called before each round of resolution ends.

        This is NOT called if the resolution ends at this round. Use `ending`
        if you want to report finalization. The index is zero-based.
        """
        ...

    def ending(self, state: State) -> None:
        """Called before the resolution ends successfully."""
        ...

    def adding_requirement(self, requirement: Requirement, parent: Candidate) -> None:
        """Called when adding a new requirement into the resolve criteria.

        :param requirement: The additional requirement to be applied to filter
            the available candidates.
        :param parent: The candidate that requires ``requirement`` as a
            dependency, or None if ``requirement`` is one of the root
            requirements passed in from ``Resolver.resolve()``.
        """
        ...

    def rejecting_candidate(self, criterion: Criterion, candidate: Candidate) -> None:
        ...

    def pinning(self, candidate: Candidate) -> None:
        """Called when adding a candidate to the potential solution."""
        ...

    def resolving_conflicts(self, causes: list[RequirementInformation]) -> None:
        ...
