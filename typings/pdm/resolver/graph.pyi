"""
This type stub file was generated by pyright.
"""

from typing import AbstractSet, Iterable, Iterator, TYPE_CHECKING, TypeVar
from pdm.models.markers import Marker
from resolvelib.resolvers import Result
from pdm.models.candidates import Candidate
from pdm.models.requirements import Requirement

if TYPE_CHECKING:
    ...
T = TypeVar("T")
class OrderedSet(AbstractSet[T]):
    """Set with deterministic ordering."""
    def __init__(self, iterable: Iterable[T] = ...) -> None:
        ...

    def __hash__(self) -> int:
        ...

    def __repr__(self) -> str:
        ...

    def __str__(self) -> str:
        ...

    def __contains__(self, obj: object) -> bool:
        ...

    def __iter__(self) -> Iterator[T]:
        ...

    def __len__(self) -> int:
        ...



def merge_markers(result: Result[Requirement, Candidate, str]) -> dict[str, Marker]:
    """Traverse through the parent dependencies till the top
    and merge any requirement markers on the path.
    Return a map of Metaset for each candidate.
    """
    ...

def populate_groups(result: Result[Requirement, Candidate, str]) -> None:
    """Find where the candidates come from by traversing
    the dependency tree back to the top.
    """
    ...
