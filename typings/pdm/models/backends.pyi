"""
This type stub file was generated by pyright.
"""

import abc
from pathlib import Path
from typing import TYPE_CHECKING, TypedDict

if TYPE_CHECKING:
    BuildSystem = TypedDict("BuildSystem", { "requires": list[str],"build-backend": str })
class BuildBackend(metaclass=abc.ABCMeta):
    """A build backend that does not support dynamic values in dependencies"""
    def __init__(self, root: Path) -> None:
        ...

    def expand_line(self, line: str, expand_env: bool = ...) -> str:
        ...

    def relative_path_to_url(self, path: str) -> str:
        ...

    @classmethod
    @abc.abstractmethod
    def build_system(cls) -> BuildSystem:
        ...



class FlitBackend(BuildBackend):
    @classmethod
    def build_system(cls) -> BuildSystem:
        ...



class SetuptoolsBackend(BuildBackend):
    @classmethod
    def build_system(cls) -> BuildSystem:
        ...



class PDMBackend(BuildBackend):
    def expand_line(self, req: str, expand_env: bool = ...) -> str:
        ...

    def relative_path_to_url(self, path: str) -> str:
        ...

    @classmethod
    def build_system(cls) -> BuildSystem:
        ...



class PathContext:
    def __init__(self, path: Path) -> None:
        ...

    def __format__(self, __format_spec: str) -> str:
        ...



class EnvContext:
    def __init__(self, expand: bool = ...) -> None:
        ...

    def __format__(self, __format_spec: str) -> str:
        ...



class HatchBackend(BuildBackend):
    def expand_line(self, line: str, expand_env: bool = ...) -> str:
        ...

    def relative_path_to_url(self, path: str) -> str:
        ...

    @classmethod
    def build_system(cls) -> BuildSystem:
        ...



_BACKENDS: dict[str, type[BuildBackend]] = ...
DEFAULT_BACKEND = ...
def get_backend(name: str) -> type[BuildBackend]:
    """Get the build backend class by name"""
    ...

def get_backend_by_spec(spec: dict) -> type[BuildBackend]:
    """Get the build backend class by specification.
    The parameter passed in is the 'build-system' section in pyproject.toml.
    """
    ...

def get_relative_path(url: str) -> str | None:
    ...
