"""
This type stub file was generated by pyright.
"""

import httpx
from functools import lru_cache
from pathlib import Path
from typing import Generic, Iterable, TYPE_CHECKING, TypeVar
from pdm._types import CandidateInfo
from pdm.models.cached_package import CachedPackage
from pdm.models.candidates import Candidate
from unearth import Link, TargetPython

if TYPE_CHECKING:
    ...
KT = TypeVar("KT")
VT = TypeVar("VT")
class JSONFileCache(Generic[KT, VT]):
    """A file cache that stores key-value pairs in a json file."""
    def __init__(self, cache_file: Path | str) -> None:
        ...

    def __contains__(self, obj: KT) -> bool:
        ...

    def get(self, obj: KT) -> VT:
        ...

    def set(self, obj: KT, value: VT) -> None:
        ...

    def delete(self, obj: KT) -> None:
        ...

    def clear(self) -> None:
        ...



class CandidateInfoCache(JSONFileCache[Candidate, CandidateInfo]):
    """A cache manager that stores the
    candidate -> (dependencies, requires_python, summary) mapping.
    """
    @staticmethod
    def get_url_part(link: Link) -> str:
        ...



class HashCache:
    """Caches hashes of PyPI artifacts so we do not need to re-download them.

    Hashes are only cached when the URL appears to contain a hash in it and the
    cache key includes the hash value returned from the server). This ought to
    avoid issues where the location on the server changes.
    """
    FAVORITE_HASH = ...
    STRONG_HASHES = ...
    def __init__(self, directory: Path | str) -> None:
        ...

    def get_hash(self, link: Link, session: httpx.Client) -> str:
        ...

    def get(self, url: str) -> str | None:
        ...

    def set(self, url: str, hash: str) -> None:
        ...



class WheelCache:
    """Caches wheels so we do not need to rebuild them.

    Wheels are only cached when the URL contains egg-info or is a VCS repository
    with an *immutable* revision. There might be more than one wheels built for
    one sdist, the one with most preferred tag will be returned.
    """
    def __init__(self, directory: Path | str) -> None:
        ...

    def get_path_for_link(self, link: Link, target_python: TargetPython) -> Path:
        ...

    def get_ephemeral_path_for_link(self, link: Link, target_python: TargetPython) -> Path:
        ...

    def get(self, link: Link, project_name: str | None, target_python: TargetPython) -> Path | None:
        ...



@lru_cache(maxsize=None)
def get_wheel_cache(directory: Path | str) -> WheelCache:
    ...

class PackageCache:
    def __init__(self, root: Path) -> None:
        ...

    def cache_wheel(self, wheel: Path) -> CachedPackage:
        """Create a CachedPackage instance from a wheel file"""
        ...

    def iter_packages(self) -> Iterable[CachedPackage]:
        ...

    def cleanup(self) -> int:
        """Remove unused cached packages"""
        ...
