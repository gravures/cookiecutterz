"""
This type stub file was generated by pyright.
"""

import contextlib
import enum
import logging
from typing import Any, Iterator, Sequence, TYPE_CHECKING
from rich.console import Console
from rich.progress import Progress, ProgressColumn
from rich.theme import Theme
from pdm._types import RichProtocol, Spinner, SpinnerT

if TYPE_CHECKING:
    ...
logger = ...
unearth_logger = ...
DEFAULT_THEME = ...
_err_console = ...
def is_interactive(console: Console | None = ...) -> bool:
    """Check if the terminal is run under interactive mode"""
    ...

def is_legacy_windows(console: Console | None = ...) -> bool:
    """Legacy Windows renderer may have problem rendering emojis"""
    ...

def style(text: str, *args: str, style: str | None = ..., **kwargs: Any) -> str:
    """return text with ansi codes using rich console

    :param text: message with rich markup, defaults to "".
    :param style: rich style to apply to whole string
    :return: string containing ansi codes
    """
    ...

def confirm(*args: str, **kwargs: Any) -> bool:
    ...

def ask(*args: str, prompt_type: type[str] | type[int] | None = ..., **kwargs: Any) -> str:
    """prompt user and return response

    :prompt_type: which rich prompt to use, defaults to str.
    :raises ValueError: unsupported prompt type
    :return: str of user's selection
    """
    ...

class Verbosity(enum.IntEnum):
    QUIET = ...
    NORMAL = ...
    DETAIL = ...
    DEBUG = ...


LOG_LEVELS = ...
class Emoji:
    if is_legacy_windows():
        SUCC = ...
        FAIL = ...
        LOCK = ...
        CONGRAT = ...
        POPPER = ...
        ELLIPSIS = ...
        ARROW_SEPARATOR = ...
    else:
        SUCC = ...
        FAIL = ...
        LOCK = ...
        POPPER = ...
        ELLIPSIS = ...
        ARROW_SEPARATOR = ...


if is_legacy_windows():
    SPINNER = ...
else:
    SPINNER = ...
class DummySpinner:
    """A dummy spinner class implementing needed interfaces.
    But only display text onto screen.
    """
    def __init__(self, text: str) -> None:
        ...

    def update(self, text: str) -> None:
        ...

    def __enter__(self: SpinnerT) -> SpinnerT:
        ...

    def __exit__(self, *args: Any) -> None:
        ...



class SilentSpinner(DummySpinner):
    ...


class UI:
    """Terminal UI object"""
    def __init__(self, verbosity: Verbosity = ..., *, exit_stack: contextlib.ExitStack | None = ...) -> None:
        ...

    def set_verbosity(self, verbosity: int) -> None:
        ...

    def set_theme(self, theme: Theme) -> None:
        """set theme for rich console

        :param theme: dict of theme
        """
        ...

    def echo(self, message: str | RichProtocol = ..., err: bool = ..., verbosity: Verbosity = ..., **kwargs: Any) -> None:
        """print message using rich console

        :param message: message with rich markup, defaults to "".
        :param err: if true print to stderr, defaults to False.
        :param verbosity: verbosity level, defaults to QUIET.
        """
        ...

    def display_columns(self, rows: Sequence[Sequence[str]], header: list[str] | None = ...) -> None:
        """Print rows in aligned columns.

        :param rows: a rows of data to be displayed.
        :param header: a list of header strings.
        """
        ...

    @contextlib.contextmanager
    def logging(self, type_: str = ...) -> Iterator[logging.Logger]:
        """A context manager that opens a file for logging when verbosity is NORMAL or
        print to the stdout otherwise.
        """
        ...

    def open_spinner(self, title: str) -> Spinner:
        """Open a spinner as a context manager."""
        ...

    def make_progress(self, *columns: str | ProgressColumn, **kwargs: Any) -> Progress:
        """create a progress instance for indented spinners"""
        ...

    def info(self, message: str, verbosity: Verbosity = ...) -> None:
        """Print a message to stdout."""
        ...

    def warn(self, message: str, verbosity: Verbosity = ...) -> None:
        """Print a message to stdout."""
        ...

    def error(self, message: str, verbosity: Verbosity = ...) -> None:
        """Print a message to stdout."""
        ...
