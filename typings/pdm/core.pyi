"""
This type stub file was generated by pyright.
"""

import argparse
import contextlib
import dataclasses as dc
from datetime import datetime
from pathlib import Path
from typing import Any, Iterator, TYPE_CHECKING
from resolvelib import Resolver
from pdm.cli.utils import ArgumentParser
from pdm.installers import InstallManager, Synchronizer
from pdm.models.repositories import PyPIRepository
from pdm.project import Project
from pdm.project.config import ConfigItem
from pdm.cli.commands.base import BaseCommand

r"""
    ____  ____  __  ___
   / __ \/ __ \/  |/  /
  / /_/ / / / / /|_/ /
 / ____/ /_/ / /  / /
/_/   /_____/_/  /_/
"""
if TYPE_CHECKING:
    ...
COMMANDS_MODULE_PATH = ...
@dc.dataclass
class State:
    """State of the core object."""
    config_settings: dict[str, Any] | None = ...
    exclude_newer: datetime | None = ...


class Core:
    """A high level object that manages all classes and configurations"""
    parser: argparse.ArgumentParser
    subparsers: argparse._SubParsersAction
    project_class = Project
    repository_class = PyPIRepository
    resolver_class = Resolver
    synchronizer_class = Synchronizer
    install_manager_class = InstallManager
    def __init__(self) -> None:
        ...

    @property
    def state(self) -> State:
        """Get the current state object."""
        ...

    @contextlib.contextmanager
    def push_state(self, __empty: bool = ..., /, **kwargs: Any) -> Iterator[State]:
        """Push a new state object to the stack.

        Args:
            __empty (bool): Whether to make an empty state.
            **kwargs: The new attributes to set to the state object.
        """
        ...

    def create_temp_dir(self, *args: Any, **kwargs: Any) -> str:
        ...

    def init_parser(self) -> None:
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> None:
        ...

    def ensure_project(self, options: argparse.Namespace, obj: Project | None) -> Project:
        ...

    def create_project(self, root_path: str | Path | None = ..., is_global: bool = ..., global_config: str | None = ...) -> Project:
        """Create a new project object

        Args:
            root_path (PathLike): The path to the project root directory
            is_global (bool): Whether the project is a global project
            global_config (str): The path to the global config file

        Returns:
            The project object
        """
        ...

    def handle(self, project: Project, options: argparse.Namespace) -> None:
        """Called before command invocation"""
        ...

    @staticmethod
    def get_command(args: list[str]) -> tuple[int, str]:
        """Get the command name from the arguments"""
        ...

    def main(self, args: list[str] | None = ..., prog_name: str | None = ..., obj: Project | None = ..., **extra: Any) -> None:
        """The main entry function"""
        ...

    def register_command(self, command: type[BaseCommand], name: str | None = ...) -> None:
        """Register a subcommand to the subparsers,
        with an optional name of the subcommand.

        Args:
            command (Type[pdm.cli.commands.base.BaseCommand]):
                The command class to register
            name (str): The name of the subcommand, if not given, `command.name`
                is used
        """
        ...

    @staticmethod
    def add_config(name: str, config_item: ConfigItem) -> None:
        """Add a config item to the configuration class.

        Args:
            name (str): The name of the config item
            config_item (pdm.project.config.ConfigItem): The config item to add
        """
        ...

    def load_plugins(self) -> None:
        """Import and load plugins under `pdm.plugin` namespace
        A plugin is a callable that accepts the core object as the only argument.

        Example:
            ```python
            def my_plugin(core: pdm.core.Core) -> None:
                ...
            ```
        """
        ...



def main(args: list[str] | None = ...) -> None:
    """The CLI entry function"""
    ...
