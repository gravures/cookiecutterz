"""
This type stub file was generated by pyright.
"""

import dataclasses as dc
from typing import Any, Dict, List, NamedTuple, Protocol, TYPE_CHECKING, Tuple, TypeVar, TypedDict, Union

if TYPE_CHECKING:
    ...
@dc.dataclass
class _RepositoryConfig:
    """Private dataclass to be subclassed"""
    config_prefix: str
    name: str
    url: str | None = ...
    username: str | None = ...
    _password: str | None = ...
    verify_ssl: bool | None = ...
    type: str | None = ...
    ca_certs: str | None = ...
    client_cert: str | None = ...
    client_key: str | None = ...
    include_packages: list[str] = ...
    exclude_packages: list[str] = ...
    def __post_init__(self) -> None:
        ...



class RepositoryConfig(_RepositoryConfig):
    def __init__(self, *args: Any, password: str | None = ..., **kwargs: Any) -> None:
        ...

    @property
    def password(self) -> str | None:
        ...

    @password.setter
    def password(self, value: str) -> None:
        ...

    def passive_update(self, other: RepositoryConfig | None = ..., **kwargs: Any) -> None:
        """An update method that prefers the existing value over the new one."""
        ...

    def __rich__(self) -> str:
        ...



RequirementDict = Union[str, Dict[str, Union[str, bool]]]
CandidateInfo = Tuple[List[str], str, str]
class Package(NamedTuple):
    name: str
    version: str
    summary: str
    ...


SearchResult = List[Package]
if TYPE_CHECKING:
    class Comparable(Protocol):
        def __lt__(self, __other: Any) -> bool:
            ...



    SpinnerT = TypeVar("SpinnerT", bound="Spinner")
    class Spinner(Protocol):
        def update(self, text: str) -> None:
            ...

        def __enter__(self: SpinnerT) -> SpinnerT:
            ...

        def __exit__(self, *args: Any) -> None:
            ...



    class RichProtocol(Protocol):
        def __rich__(self) -> str:
            ...



    class FileHash(TypedDict, total=False):
        url: str
        hash: str
        file: str
        ...
