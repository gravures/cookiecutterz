"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Any, Mapping, TYPE_CHECKING
from pdm.formats.base import MetaConverter, convert_from
from argparse import Namespace
from pdm.project import Project

if TYPE_CHECKING:
    ...
def check_fingerprint(project: Project | None, filename: Path | str) -> bool:
    ...

VERSION_RE = ...
NAME_EMAIL_RE = ...
def parse_name_email(name_email: list[str]) -> list[str]:
    ...

class PoetryMetaConverter(MetaConverter):
    @convert_from("authors")
    def authors(self, value: list[str]) -> list[str]:
        ...

    @convert_from("maintainers")
    def maintainers(self, value: list[str]) -> list[str]:
        ...

    @convert_from("license")
    def license(self, value: str) -> dict[str, str]:
        ...

    @convert_from(name="requires-python")
    def requires_python(self, source: dict[str, Any]) -> str:
        ...

    @convert_from()
    def urls(self, source: dict[str, Any]) -> dict[str, str]:
        ...

    @convert_from("plugins", name="entry-points")
    def entry_points(self, value: dict[str, dict[str, str]]) -> dict[str, dict[str, str]]:
        ...

    @convert_from()
    def dependencies(self, source: dict[str, Any]) -> list[str]:
        ...

    @convert_from("dev-dependencies")
    def dev_dependencies(self, value: dict) -> None:
        ...

    @convert_from("group")
    def group_dependencies(self, value: dict[str, dict[str, Any]]) -> None:
        ...

    @convert_from()
    def includes(self, source: dict[str, list[str] | str]) -> list[str]:
        ...

    @convert_from("exclude")
    def excludes(self, value: list[str]) -> None:
        ...

    @convert_from("build")
    def build(self, value: str | dict) -> None:
        ...

    @convert_from("source")
    def sources(self, value: list[dict[str, Any]]) -> None:
        ...



def convert(project: Project | None, filename: str | Path, options: Namespace | None) -> tuple[Mapping[str, Any], Mapping[str, Any]]:
    ...

def export(project: Project, candidates: list, options: Any) -> None:
    ...
