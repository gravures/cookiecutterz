"""
This type stub file was generated by pyright.
"""

import dataclasses
import rich.theme
from functools import cached_property
from pathlib import Path
from typing import Any, Callable, ClassVar, Iterator, Mapping, MutableMapping
from pdm._types import RepositoryConfig

REPOSITORY = ...
SOURCE = ...
DEFAULT_REPOSITORIES = ...
ui = ...
def load_config(file_path: Path) -> dict[str, Any]:
    """Load a nested TOML document into key-value pairs

    E.g. ["python"]["use_venv"] will be loaded as "python.use_venv" key.
    """
    ...

def ensure_boolean(val: Any) -> bool:
    """Coerce a string value to a boolean value"""
    ...

def split_by_comma(val: list[str] | str) -> list[str]:
    """Split a string value by comma"""
    ...

DEFAULT_PYPI_INDEX = ...
@dataclasses.dataclass
class ConfigItem:
    """An item of configuration, with following attributes:

    Args:
        description (str): the config description
        default (Any): the default value, if given, will show in `pdm config`
        global_only (bool): not allowed to save in project config
        env_var (str|None): the env var name to take value from
        coerce (Callable): a function to coerce the value
        replace: (str|None): the deprecated name to replace
    """
    _NOT_SET = ...
    description: str
    default: Any = ...
    global_only: bool = ...
    env_var: str | None = ...
    coerce: Callable = ...
    replace: str | None = ...
    def should_show(self) -> bool:
        ...



class Config(MutableMapping[str, str]):
    """A dict-like object for configuration key and values"""
    _config_map: ClassVar[dict[str, ConfigItem]] = ...
    site: Config | None = ...
    @classmethod
    def get_defaults(cls) -> dict[str, Any]:
        ...

    @cached_property
    def env_map(self) -> Mapping[str, Any]:
        ...

    @classmethod
    def add_config(cls, name: str, item: ConfigItem) -> None:
        """Add or modify a config item"""
        ...

    def __init__(self, config_file: Path, is_global: bool = ...) -> None:
        ...

    def load_theme(self) -> rich.theme.Theme:
        ...

    @property
    def self_data(self) -> dict[str, Any]:
        ...

    def iter_sources(self) -> Iterator[RepositoryConfig]:
        ...

    def __getitem__(self, key: str) -> Any:
        ...

    def __setitem__(self, key: str, value: Any) -> None:
        ...

    def __len__(self) -> int:
        ...

    def __iter__(self) -> Iterator[str]:
        ...

    def __delitem__(self, key: str) -> None:
        ...

    def get_repository_config(self, name_or_url: str, prefix: str) -> RepositoryConfig | None:
        """Get a repository or source by name or url."""
        ...



class EnvMap(Mapping[str, Any]):
    def __init__(self, config_items: Mapping[str, ConfigItem]) -> None:
        ...

    def __repr__(self) -> str:
        ...

    def __getitem__(self, k: str) -> Any:
        ...

    def __iter__(self) -> Iterator[str]:
        ...

    def __len__(self) -> int:
        ...
