"""
This type stub file was generated by pyright.
"""

import os

"""
Main entry point for the `cookiecutter` command.

The code in this module is also a good example of how to use Cookiecutter as a
library rather than a script.
"""
logger = ...
def cookiecutter(template, checkout=..., no_input=..., extra_context=..., replay=..., overwrite_if_exists=..., output_dir=..., config_file=..., default_config=..., password=..., directory=..., skip_if_file_exists=..., accept_hooks=..., keep_project_on_failure=...): # -> str:
    """
    Run Cookiecutter just as if using it from the command line.

    :param template: A directory containing a project template directory,
        or a URL to a git repository.
    :param checkout: The branch, tag or commit ID to checkout after clone.
    :param no_input: Do not prompt for user input.
        Use default values for template parameters taken from `cookiecutter.json`, user
        config and `extra_dict`. Force a refresh of cached resources.
    :param extra_context: A dictionary of context that overrides default
        and user configuration.
    :param replay: Do not prompt for input, instead read from saved json. If
        ``True`` read from the ``replay_dir``.
        if it exists
    :param overwrite_if_exists: Overwrite the contents of the output directory
        if it exists.
    :param output_dir: Where to output the generated project dir into.
    :param config_file: User configuration file path.
    :param default_config: Use default values rather than a config file.
    :param password: The password to use when extracting the repository.
    :param directory: Relative path to a cookiecutter template in a repository.
    :param skip_if_file_exists: Skip the files in the corresponding directories
        if they already exist.
    :param accept_hooks: Accept pre and post hooks if set to `True`.
    :param keep_project_on_failure: If `True` keep generated project directory even when
        generation fails
    """
    ...

class _patch_import_path_for_repo:
    def __init__(self, repo_dir: os.PathLike[str]) -> None:
        ...

    def __enter__(self): # -> None:
        ...

    def __exit__(self, type, value, traceback): # -> None:
        ...
